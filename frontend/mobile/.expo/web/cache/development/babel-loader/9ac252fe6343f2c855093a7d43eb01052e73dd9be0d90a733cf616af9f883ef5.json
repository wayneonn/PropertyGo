{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as DocumentPicker from \"expo-document-picker\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction UploadScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedDocuments = _useState2[0],\n    setSelectedDocuments = _useState2[1];\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    descriptions = _useState4[0],\n    setDescriptions = _useState4[1];\n  var selectDocuments = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var results = yield DocumentPicker.getDocumentAsync({\n          multiple: true,\n          type: \"application/pdf\"\n        });\n        if (results.canceled === false) {\n          var newSelectedDocuments = results.assets;\n          setSelectedDocuments(_toConsumableArray(newSelectedDocuments));\n        }\n      } catch (error) {\n        console.log(\"Error selecting documents:\", error);\n      }\n    });\n    return function selectDocuments() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var removeDocument = function removeDocument(document) {\n    var newSelectedDocuments = selectedDocuments.filter(function (doc) {\n      return doc.name !== document.name;\n    });\n    setSelectedDocuments(_toConsumableArray(newSelectedDocuments));\n  };\n  var handleUpload = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        var fileData = new FormData();\n        selectedDocuments.forEach(function (document) {\n          var fileuri = document.uri;\n          var filetype = \"application/pdf\";\n          var filename = document.name;\n          console.log(document.uri);\n          var file = {\n            uri: fileuri,\n            type: filetype,\n            name: filename\n          };\n          var base64Data = file.uri.split(\",\")[1];\n          var base64String = window.atob(base64Data);\n          var bytes = new Uint8Array(base64String.length);\n          for (var i = 0; i < base64String.length; i++) {\n            bytes[i] = base64String.charCodeAt(i);\n          }\n          var fileBlob = new Blob([bytes], {\n            type: file.type\n          });\n          console.log(fileBlob);\n          fileData.append(\"documents\", fileBlob, filename);\n        });\n        var response = yield fetch(\"http://127.0.0.1:3000/documents/upload\", {\n          method: \"post\",\n          body: fileData\n        });\n        if (response.ok) {\n          var data = yield response.json();\n          console.log(\"Upload response:\", data);\n        } else {\n          throw new Error(\"File upload failed\");\n        }\n      } catch (error) {\n        console.log(\"Error upload:\", error);\n      }\n    });\n    return function handleUpload() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var documents = [{\n    id: 1,\n    name: \"Your selected documents would appear here.\"\n  }];\n  var renderDocumentItem = function renderDocumentItem(_ref4) {\n    var item = _ref4.item;\n    return _jsxs(TouchableOpacity, {\n      style: styles.documentItem,\n      children: [_jsx(Text, {\n        style: styles.documentText,\n        children: item.name\n      }), _jsx(Button, {\n        style: styles.downloadButton,\n        title: \"Remove\",\n        onPress: function onPress() {\n          return removeDocument(item);\n        }\n      })]\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.headerText,\n      children: \"Upload your documents here!\"\n    }), _jsxs(View, {\n      style: styles.documentListContainer,\n      children: [_jsx(Text, {\n        style: styles.detailText,\n        children: \"List of selected Documents:\"\n      }), _jsx(FlatList, {\n        data: selectedDocuments.length > 0 ? selectedDocuments : documents,\n        keyExtractor: function keyExtractor(item, index) {\n          return item.id ? item.id.toString() : index.toString();\n        },\n        renderItem: renderDocumentItem\n      })]\n    }), _jsx(Button, {\n      style: styles.downloadButton,\n      title: \"Select Documents\",\n      onPress: selectDocuments\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: \"#fff\"\n  },\n  headerText: {\n    fontSize: 24,\n    marginBottom: 16,\n    textAlign: \"center\"\n  },\n  downloadButton: {\n    backgroundColor: \"#007AFF\",\n    color: \"#fff\",\n    padding: 16,\n    borderRadius: 8,\n    marginVertical: 8\n  },\n  detailText: {\n    fontSize: 16,\n    marginBottom: 8,\n    fontWeight: \"bold\"\n  },\n  documentListContainer: {\n    borderWidth: 1,\n    borderColor: \"#ddd\",\n    borderRadius: 8,\n    padding: 12,\n    paddingTop: 14\n  },\n  documentItem: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    padding: 12,\n    marginBottom: 8,\n    backgroundColor: \"#F8F8F8\",\n    borderRadius: 8\n  },\n  documentText: {\n    fontSize: 14,\n    color: \"#333\"\n  }\n});\nexport default UploadScreen;","map":{"version":3,"names":["React","useState","StyleSheet","View","Text","Button","FlatList","TextInput","TouchableOpacity","DocumentPicker","jsx","_jsx","jsxs","_jsxs","UploadScreen","_ref","navigation","_useState","_useState2","_slicedToArray","selectedDocuments","setSelectedDocuments","_useState3","_useState4","descriptions","setDescriptions","selectDocuments","_ref2","_asyncToGenerator","results","getDocumentAsync","multiple","type","canceled","newSelectedDocuments","assets","_toConsumableArray","error","console","log","apply","arguments","removeDocument","document","filter","doc","name","handleUpload","_ref3","fileData","FormData","forEach","fileuri","uri","filetype","filename","file","base64Data","split","base64String","window","atob","bytes","Uint8Array","length","i","charCodeAt","fileBlob","Blob","append","response","fetch","method","body","ok","data","json","Error","documents","id","renderDocumentItem","_ref4","item","style","styles","documentItem","children","documentText","downloadButton","title","onPress","container","headerText","documentListContainer","detailText","keyExtractor","index","toString","renderItem","create","flex","padding","backgroundColor","fontSize","marginBottom","textAlign","color","borderRadius","marginVertical","fontWeight","borderWidth","borderColor","paddingTop","flexDirection","alignItems","justifyContent"],"sources":["C:/Users/Legion/Desktop/PropertyGo/PropertyGo/frontend/mobile/DocumentScreen.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  View,\r\n  Text,\r\n  Button,\r\n  FlatList,\r\n  TextInput,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\nimport * as DocumentPicker from \"expo-document-picker\";\r\n\r\nfunction UploadScreen({ navigation }) {\r\n  const [selectedDocuments, setSelectedDocuments] = useState([]);\r\n  const [descriptions, setDescriptions] = useState({});\r\n\r\n  // This is suppose to show all the documents that you selected.\r\n  const selectDocuments = async () => {\r\n    try {\r\n      const results = await DocumentPicker.getDocumentAsync({\r\n        multiple: true,\r\n        type: \"application/pdf\",\r\n      });\r\n\r\n      // If there is a file that is selected.\r\n      if (results.canceled === false) {\r\n        const newSelectedDocuments = results.assets;\r\n        setSelectedDocuments([...newSelectedDocuments]);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error selecting documents:\", error);\r\n    }\r\n  };\r\n\r\n  // This is suppose to remove a documents from the selected documents list.\r\n  const removeDocument = (document) => {\r\n    const newSelectedDocuments = selectedDocuments.filter(\r\n      (doc) => doc.name !== document.name\r\n    );\r\n    setSelectedDocuments([...newSelectedDocuments]);\r\n  };\r\n\r\n  // This then uploads the documents you selected.\r\n  const handleUpload = async () => {\r\n    try {\r\n      //Begin logic to send data to API\r\n      const fileData = new FormData();\r\n      // Append each selected document to the FormData object\r\n      selectedDocuments.forEach((document) => {\r\n        const fileuri = document.uri;\r\n        const filetype = \"application/pdf\";\r\n        const filename = document.name;\r\n        console.log(document.uri);\r\n\r\n        const file = {\r\n          uri: fileuri,\r\n          type: filetype,\r\n          name: filename,\r\n        };\r\n\r\n        // Extract the base64-encoded data from the URI\r\n        const base64Data = file.uri.split(\",\")[1];\r\n\r\n        // Decode the base64 string into a Uint8Array\r\n        const base64String = window.atob(base64Data);\r\n        const bytes = new Uint8Array(base64String.length);\r\n        for (let i = 0; i < base64String.length; i++) {\r\n          bytes[i] = base64String.charCodeAt(i);\r\n        }\r\n\r\n        // Create a Blob object from the decoded data\r\n        const fileBlob = new Blob([bytes], { type: file.type });\r\n        console.log(fileBlob);\r\n\r\n        fileData.append(\"documents\", fileBlob, filename);\r\n      });\r\n\r\n      // Send the data to the API\r\n      const response = await fetch(\"http://127.0.0.1:3000/documents/upload\", {\r\n        method: \"post\",\r\n        body: fileData,\r\n      });\r\n\r\n      // Check the response status and log the result\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log(\"Upload response:\", data);\r\n      } else {\r\n        throw new Error(\"File upload failed\");\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error upload:\", error);\r\n    }\r\n  };\r\n\r\n  // Initial dummy documents.\r\n  const documents = [\r\n    { id: 1, name: \"Your selected documents would appear here.\" },\r\n  ];\r\n\r\n  const renderDocumentItem = ({ item }) => (\r\n    <TouchableOpacity style={styles.documentItem}>\r\n      <Text style={styles.documentText}>{item.name}</Text>\r\n      <Button\r\n        style={styles.downloadButton}\r\n        title=\"Remove\"\r\n        onPress={() => removeDocument(item)}\r\n      />\r\n    </TouchableOpacity>\r\n  );\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.headerText}>Upload your documents here!</Text>\r\n      {/* Wrap the FlatList in a View with border styles */}\r\n      <View style={styles.documentListContainer}>\r\n        <Text style={styles.detailText}>List of selected Documents:</Text>\r\n        <FlatList\r\n          data={selectedDocuments.length > 0 ? selectedDocuments : documents}\r\n          keyExtractor={(item, index) =>\r\n            item.id ? item.id.toString() : index.toString()\r\n          }\r\n          renderItem={renderDocumentItem}\r\n        />\r\n      </View>\r\n      <Button\r\n        style={styles.downloadButton}\r\n        title=\"Select Documents\"\r\n        onPress={selectDocuments}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 16,\r\n    backgroundColor: \"#fff\",\r\n  },\r\n  headerText: {\r\n    fontSize: 24,\r\n    marginBottom: 16,\r\n    textAlign: \"center\",\r\n  },\r\n  downloadButton: {\r\n    backgroundColor: \"#007AFF\",\r\n    color: \"#fff\",\r\n    padding: 16,\r\n    borderRadius: 8,\r\n    marginVertical: 8,\r\n  },\r\n  detailText: {\r\n    fontSize: 16,\r\n    marginBottom: 8,\r\n    fontWeight: \"bold\",\r\n  },\r\n  documentListContainer: {\r\n    borderWidth: 1,\r\n    borderColor: \"#ddd\",\r\n    borderRadius: 8,\r\n    padding: 12,\r\n    paddingTop: 14,\r\n  },\r\n  documentItem: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n    padding: 12,\r\n    marginBottom: 8,\r\n    backgroundColor: \"#F8F8F8\",\r\n    borderRadius: 8,\r\n  },\r\n  documentText: {\r\n    fontSize: 14,\r\n    color: \"#333\",\r\n  },\r\n});\r\n\r\nexport default UploadScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}