{"ast":null,"code":"var _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar handleSignUp = function () {\n  var _ref = _asyncToGenerator(function* () {\n    if (password !== confirmPassword) {\n      alert('Passwords do not match');\n      return;\n    }\n    try {\n      var userData = {\n        userName: userName,\n        password: password,\n        name: 'Emily Brown',\n        email: email,\n        countryOfOrigin: selectedCountry.toUpperCase(),\n        dateOfBirth: dateOfBirth ? dateOfBirth.toISOString().split('T')[0] : null,\n        isActive: true,\n        rating: null,\n        experience: null,\n        projectsCompleted: null,\n        companyName: null,\n        startTime: null,\n        endTime: null,\n        contractorSpecialization: null,\n        userType: 'BUYER'\n      };\n      var signUpResult = yield signUpUser(userData);\n      if (signUpResult.success) {\n        alert('Signup successful');\n        console.log(signUpResult.data);\n      } else {\n        alert(signUpResult.message);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert('Signup failed');\n    }\n  });\n  return function handleSignUp() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["handleSignUp","_ref","_asyncToGenerator","password","confirmPassword","alert","userData","userName","name","email","countryOfOrigin","selectedCountry","toUpperCase","dateOfBirth","toISOString","split","isActive","rating","experience","projectsCompleted","companyName","startTime","endTime","contractorSpecialization","userType","signUpResult","signUpUser","success","console","log","data","message","error","apply","arguments"],"sources":["/Users/wayneonn/Code/PropertyGo/frontend/mobile/screens/login/SignUpScreen.js"],"sourcesContent":["const handleSignUp = async () => {\n  if (password !== confirmPassword) {\n    alert('Passwords do not match');\n    return;\n  }\n\n  try {\n    const userData = {\n      userName,\n      password,\n      name: 'Emily Brown',\n      email,\n      countryOfOrigin: selectedCountry.toUpperCase(), // Ensure it's uppercase\n      dateOfBirth: dateOfBirth ? dateOfBirth.toISOString().split('T')[0] : null,\n      isActive: true,\n      rating: null,\n      experience: null,\n      projectsCompleted: null,\n      companyName: null,\n      startTime: null,\n      endTime: null,\n      contractorSpecialization: null,\n      userType: 'BUYER',\n    };\n\n    const signUpResult = await signUpUser(userData);\n\n    if (signUpResult.success) {\n      alert('Signup successful');\n      console.log(signUpResult.data);\n    } else {\n      alert(signUpResult.message);\n    }\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Signup failed');\n  }\n};\n"],"mappings":";AAAA,IAAMA,YAAY;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;IAC/B,IAAIC,QAAQ,KAAKC,eAAe,EAAE;MAChCC,KAAK,CAAC,wBAAwB,CAAC;MAC/B;IACF;IAEA,IAAI;MACF,IAAMC,QAAQ,GAAG;QACfC,QAAQ,EAARA,QAAQ;QACRJ,QAAQ,EAARA,QAAQ;QACRK,IAAI,EAAE,aAAa;QACnBC,KAAK,EAALA,KAAK;QACLC,eAAe,EAAEC,eAAe,CAACC,WAAW,CAAC,CAAC;QAC9CC,WAAW,EAAEA,WAAW,GAAGA,WAAW,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;QACzEC,QAAQ,EAAE,IAAI;QACdC,MAAM,EAAE,IAAI;QACZC,UAAU,EAAE,IAAI;QAChBC,iBAAiB,EAAE,IAAI;QACvBC,WAAW,EAAE,IAAI;QACjBC,SAAS,EAAE,IAAI;QACfC,OAAO,EAAE,IAAI;QACbC,wBAAwB,EAAE,IAAI;QAC9BC,QAAQ,EAAE;MACZ,CAAC;MAED,IAAMC,YAAY,SAASC,UAAU,CAACpB,QAAQ,CAAC;MAE/C,IAAImB,YAAY,CAACE,OAAO,EAAE;QACxBtB,KAAK,CAAC,mBAAmB,CAAC;QAC1BuB,OAAO,CAACC,GAAG,CAACJ,YAAY,CAACK,IAAI,CAAC;MAChC,CAAC,MAAM;QACLzB,KAAK,CAACoB,YAAY,CAACM,OAAO,CAAC;MAC7B;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9B3B,KAAK,CAAC,eAAe,CAAC;IACxB;EACF,CAAC;EAAA,gBArCKL,YAAYA,CAAA;IAAA,OAAAC,IAAA,CAAAgC,KAAA,OAAAC,SAAA;EAAA;AAAA,GAqCjB"},"metadata":{},"sourceType":"script","externalDependencies":[]}