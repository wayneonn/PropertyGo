{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport invariant from 'invariant';\nimport { perPlatformTypes } from \"./fileTypes\";\nimport { NativeDocumentPicker } from \"./NativeDocumentPicker\";\nexport var types = perPlatformTypes[Platform.OS];\nexport function pickDirectory(_x) {\n  return _pickDirectory.apply(this, arguments);\n}\nfunction _pickDirectory() {\n  _pickDirectory = _asyncToGenerator(function* (params) {\n    if (Platform.OS === 'ios') {\n      var result = yield pick(_objectSpread(_objectSpread({}, params), {}, {\n        mode: 'open',\n        allowMultiSelection: false,\n        type: ['public.folder']\n      }));\n      return {\n        uri: result[0].uri\n      };\n    } else {\n      return NativeDocumentPicker.pickDirectory();\n    }\n  });\n  return _pickDirectory.apply(this, arguments);\n}\nexport function pickSingle(opts) {\n  var options = _objectSpread(_objectSpread({}, opts), {}, {\n    allowMultiSelection: false\n  });\n  return pick(options).then(function (results) {\n    return results[0];\n  });\n}\nexport function pick(opts) {\n  var options = _objectSpread({\n    allowMultiSelection: false,\n    type: [types.allFiles]\n  }, opts);\n  var newOpts = _objectSpread(_objectSpread({\n    presentationStyle: 'formSheet',\n    transitionStyle: 'coverVertical'\n  }, options), {}, {\n    type: Array.isArray(options.type) ? options.type : [options.type]\n  });\n  return doPick(newOpts);\n}\nfunction doPick(options) {\n  var _options$mode, _options$copyTo;\n  invariant(!('filetype' in options), 'A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`');\n  invariant(!('types' in options), 'A `types` option was passed to DocumentPicker.pick, the correct option is `type`');\n  invariant(options.type.every(function (type) {\n    return typeof type === 'string';\n  }), `Unexpected type option in ${options.type}, did you try using a DocumentPicker.types.* that does not exist?`);\n  invariant(options.type.length > 0, '`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted');\n  invariant(!options.type.includes('folder'), 'RN document picker: \"folder\" option was removed, use \"pickDirectory()\"');\n  if ('mode' in options && !['import', 'open'].includes((_options$mode = options.mode) != null ? _options$mode : '')) {\n    throw new TypeError('Invalid mode option: ' + options.mode);\n  }\n  if ('copyTo' in options && !['cachesDirectory', 'documentDirectory'].includes((_options$copyTo = options.copyTo) != null ? _options$copyTo : '')) {\n    throw new TypeError('Invalid copyTo option: ' + options.copyTo);\n  }\n  return NativeDocumentPicker.pick(options);\n}\nexport function releaseSecureAccess(uris) {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve();\n  }\n  invariant(Array.isArray(uris) && uris.every(function (uri) {\n    return typeof uri === 'string';\n  }), `\"uris\" should be an array of strings, was ${uris}`);\n  return NativeDocumentPicker.releaseSecureAccess(uris);\n}\nvar E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED';\nvar E_DOCUMENT_PICKER_IN_PROGRESS = 'ASYNC_OP_IN_PROGRESS';\nexport function isCancel(err) {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_CANCELED);\n}\nexport function isInProgress(err) {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_IN_PROGRESS);\n}\nfunction isErrorWithCode(err, errorCode) {\n  if (err && typeof err === 'object' && 'code' in err) {\n    var nativeModuleErrorInstance = err;\n    return (nativeModuleErrorInstance === null || nativeModuleErrorInstance === void 0 ? void 0 : nativeModuleErrorInstance.code) === errorCode;\n  }\n  return false;\n}\nexport default {\n  isCancel: isCancel,\n  isInProgress: isInProgress,\n  releaseSecureAccess: releaseSecureAccess,\n  pickDirectory: pickDirectory,\n  pick: pick,\n  pickSingle: pickSingle,\n  types: types,\n  perPlatformTypes: perPlatformTypes\n};","map":{"version":3,"names":["invariant","perPlatformTypes","NativeDocumentPicker","types","Platform","OS","pickDirectory","_x","_pickDirectory","apply","arguments","_asyncToGenerator","params","result","pick","_objectSpread","mode","allowMultiSelection","type","uri","pickSingle","opts","options","then","results","allFiles","newOpts","presentationStyle","transitionStyle","Array","isArray","doPick","_options$mode","_options$copyTo","every","length","includes","TypeError","copyTo","releaseSecureAccess","uris","Promise","resolve","E_DOCUMENT_PICKER_CANCELED","E_DOCUMENT_PICKER_IN_PROGRESS","isCancel","err","isErrorWithCode","isInProgress","errorCode","nativeModuleErrorInstance","code"],"sources":["/Users/limzhongzhi/Desktop/PropertyGo/PropertyGo/frontend/mobile/node_modules/react-native-document-picker/src/index.tsx"],"sourcesContent":["import { Platform, ModalPropsIOS } from 'react-native'\nimport invariant from 'invariant'\nimport type { PlatformTypes, SupportedPlatforms } from './fileTypes'\nimport { perPlatformTypes } from './fileTypes'\nimport { NativeDocumentPicker } from './NativeDocumentPicker'\n\nexport type DocumentPickerResponse = {\n  uri: string\n  name: string | null\n  copyError?: string\n  fileCopyUri: string | null\n  type: string | null\n  size: number | null\n}\n\nexport const types = perPlatformTypes[Platform.OS]\n\nexport type DirectoryPickerResponse = {\n  uri: string\n}\n\nexport type TransitionStyle = 'coverVertical' | 'flipHorizontal' | 'crossDissolve' | 'partialCurl'\n\nexport type DocumentPickerOptions<OS extends SupportedPlatforms> = {\n  type?:\n    | string\n    | PlatformTypes[OS][keyof PlatformTypes[OS]]\n    | Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n  mode?: 'import' | 'open'\n  copyTo?: 'cachesDirectory' | 'documentDirectory'\n  allowMultiSelection?: boolean\n  transitionStyle?: TransitionStyle\n} & Pick<ModalPropsIOS, 'presentationStyle'>\n\nexport async function pickDirectory<OS extends SupportedPlatforms>(\n  params?: Pick<DocumentPickerOptions<OS>, 'presentationStyle' | 'transitionStyle'>,\n): Promise<DirectoryPickerResponse | null> {\n  if (Platform.OS === 'ios') {\n    const result = await pick({\n      ...params,\n      mode: 'open',\n      allowMultiSelection: false,\n      type: ['public.folder'],\n    })\n    return { uri: result[0].uri }\n  } else {\n    return NativeDocumentPicker.pickDirectory()\n  }\n}\n\nexport function pickSingle<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse> {\n  const options = {\n    ...opts,\n    allowMultiSelection: false,\n  }\n  return pick(options).then((results) => results[0])\n}\n\nexport function pick<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse[]> {\n  const options = {\n    // must be false to maintain old (v5) behavior\n    allowMultiSelection: false,\n    type: [types.allFiles],\n    ...opts,\n  }\n\n  const newOpts: DoPickParams<OS> = {\n    presentationStyle: 'formSheet',\n    transitionStyle: 'coverVertical',\n    ...options,\n    type: Array.isArray(options.type) ? options.type : [options.type],\n  }\n\n  return doPick(newOpts)\n}\n\ntype DoPickParams<OS extends SupportedPlatforms> = DocumentPickerOptions<OS> & {\n  type: Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n  allowMultiSelection: boolean\n  presentationStyle: NonNullable<ModalPropsIOS['presentationStyle']>\n  transitionStyle: TransitionStyle\n}\n\nfunction doPick<OS extends SupportedPlatforms>(\n  options: DoPickParams<OS>,\n): Promise<DocumentPickerResponse[]> {\n  invariant(\n    !('filetype' in options),\n    'A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n  invariant(\n    !('types' in options),\n    'A `types` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n\n  invariant(\n    options.type.every((type: unknown) => typeof type === 'string'),\n    `Unexpected type option in ${options.type}, did you try using a DocumentPicker.types.* that does not exist?`,\n  )\n  invariant(\n    options.type.length > 0,\n    '`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted',\n  )\n\n  invariant(\n    !options.type.includes('folder'),\n    'RN document picker: \"folder\" option was removed, use \"pickDirectory()\"',\n  )\n\n  if ('mode' in options && !['import', 'open'].includes(options.mode ?? '')) {\n    throw new TypeError('Invalid mode option: ' + options.mode)\n  }\n\n  if (\n    'copyTo' in options &&\n    !['cachesDirectory', 'documentDirectory'].includes(options.copyTo ?? '')\n  ) {\n    throw new TypeError('Invalid copyTo option: ' + options.copyTo)\n  }\n\n  return NativeDocumentPicker.pick(options)\n}\n\nexport function releaseSecureAccess(uris: Array<string>): Promise<void> {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve()\n  }\n\n  invariant(\n    Array.isArray(uris) && uris.every((uri) => typeof uri === 'string'),\n    `\"uris\" should be an array of strings, was ${uris}`,\n  )\n\n  return NativeDocumentPicker.releaseSecureAccess(uris)\n}\n\nconst E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED'\nconst E_DOCUMENT_PICKER_IN_PROGRESS = 'ASYNC_OP_IN_PROGRESS'\n\nexport type NativeModuleErrorShape = Error & { code?: string }\n\nexport function isCancel(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_CANCELED)\n}\n\nexport function isInProgress(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_IN_PROGRESS)\n}\n\nfunction isErrorWithCode(err: unknown, errorCode: string): boolean {\n  if (err && typeof err === 'object' && 'code' in err) {\n    const nativeModuleErrorInstance = err as NativeModuleErrorShape\n    return nativeModuleErrorInstance?.code === errorCode\n  }\n  return false\n}\n\nexport default {\n  isCancel,\n  isInProgress,\n  releaseSecureAccess,\n  pickDirectory,\n  pick,\n  pickSingle,\n  types,\n  perPlatformTypes,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}