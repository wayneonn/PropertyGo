{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _excluded = [\"accessToken\"];\nimport * as AppAuth from 'expo-app-auth';\nimport Constants from 'expo-constants';\nimport { CodedError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar isInExpo = Constants.appOwnership === 'expo';\nexport function getPlatformGUID(config) {\n  var clientId = config.clientId;\n  var iosClientId = isInExpo ? config.iosClientId : config.iosStandaloneAppClientId;\n  var androidClientId = isInExpo ? config.androidClientId : config.androidStandaloneAppClientId;\n  var platformClientId = Platform.select({\n    ios: iosClientId,\n    android: androidClientId,\n    default: config.clientId\n  }) || clientId;\n  if (typeof iosClientId === 'string' && typeof androidClientId === 'string' && iosClientId === androidClientId) {\n    throw new CodedError('ERR_GOOGLE_CONFIG', 'Keys for Android and iOS cannot be the same value. Ensure you are linking the client IDs matching the given platforms in the Google APIs console: https://console.developers.google.com/apis/credentials');\n  }\n  if (!platformClientId) {\n    throw new CodedError('ERR_GOOGLE_CONFIG', 'Please provide the appropriate client ID. See the documentation for more details https://docs.expo.io/versions/latest/sdk/google/#loginasync');\n  }\n  var guid = guidFromClientId(platformClientId);\n  return guid;\n}\nvar PROJECT_ID_LENGTH = 32;\nfunction isValidGUID(guid) {\n  var components = guid.split('-');\n  if (components.length !== 2) {\n    return {\n      isValid: false,\n      reason: `\\`${guid}\\` must be a string of numbers and an alphanumeric string ${PROJECT_ID_LENGTH} characters long, joined with a hyphen.`\n    };\n  }\n  var projectNumber = components[0];\n  var projectId = components[1];\n  if (isNaN(+projectNumber)) {\n    var hashedProjectId = Array(PROJECT_ID_LENGTH).fill('x');\n    return {\n      isValid: false,\n      reason: `\\`${projectNumber}-${hashedProjectId}\\` project number must be a string of numbers.`\n    };\n  }\n  if (!projectId.match('^[a-zA-Z0-9]+$')) {\n    var hashedProjectNumber = Array(projectNumber.length).fill('x');\n    return {\n      isValid: false,\n      reason: `\\`${hashedProjectNumber}-${projectId}\\` project ID must be an alphanumeric string ${PROJECT_ID_LENGTH} characters long.`\n    };\n  }\n  return {\n    isValid: true\n  };\n}\nfunction guidFromClientId(clientId) {\n  var clientIdComponents = clientId.split('.').filter(function (component) {\n    return component.includes('-');\n  });\n  var guid = clientIdComponents[0];\n  var _isValidGUID = isValidGUID(guid),\n    isValid = _isValidGUID.isValid,\n    reason = _isValidGUID.reason;\n  if (!isValid) {\n    throw new CodedError('ERR_GOOGLE_GUID', reason + ' Please ensure you copied the client ID correctly.');\n  }\n  return guid;\n}\nexport function logInAsync(_x) {\n  return _logInAsync.apply(this, arguments);\n}\nfunction _logInAsync() {\n  _logInAsync = _asyncToGenerator(function* (config) {\n    if (config.behavior !== undefined) {\n      console.warn(\"Deprecated: Native Google Sign-In has been moved to Expo.GoogleSignIn ('expo-google-sign-in') Falling back to `web` behavior. `behavior` deprecated in SDK 34\");\n    }\n    if (config.webClientId !== undefined) {\n      console.warn('Deprecated: You will need to use expo-google-sign-in to do server side authentication outside of the Expo client');\n    }\n    var userDefinedScopes = config.scopes || [];\n    var requiredScopes = [].concat(_toConsumableArray(userDefinedScopes), ['profile', 'email', 'openid']);\n    var scopes = _toConsumableArray(new Set(requiredScopes));\n    var guid = getPlatformGUID(config);\n    var clientId = `${guid}.apps.googleusercontent.com`;\n    var redirectUrl = config.redirectUrl ? config.redirectUrl : `${AppAuth.OAuthRedirect}:/oauth2redirect/google`;\n    var extras = {};\n    if (config.language) {\n      extras.hl = config.language;\n    }\n    if (config.loginHint) {\n      extras.login_hint = config.loginHint;\n    }\n    try {\n      var logInResult = yield AppAuth.authAsync({\n        issuer: 'https://accounts.google.com',\n        scopes: scopes,\n        redirectUrl: redirectUrl,\n        clientId: clientId,\n        additionalParameters: extras\n      });\n      var userInfoResponse = yield fetch('https://www.googleapis.com/userinfo/v2/me', {\n        headers: {\n          Authorization: `Bearer ${logInResult.accessToken}`\n        }\n      });\n      var userInfo = yield userInfoResponse.json();\n      return {\n        type: 'success',\n        accessToken: logInResult.accessToken,\n        idToken: logInResult.idToken,\n        refreshToken: logInResult.refreshToken,\n        user: {\n          id: userInfo.id,\n          name: userInfo.name,\n          givenName: userInfo.given_name,\n          familyName: userInfo.family_name,\n          photoUrl: userInfo.picture,\n          email: userInfo.email\n        }\n      };\n    } catch (error) {\n      var message = error.message.toLowerCase();\n      if (message.includes('user cancelled') || message.includes('error -3')) {\n        return {\n          type: 'cancel'\n        };\n      }\n      throw error;\n    }\n  });\n  return _logInAsync.apply(this, arguments);\n}\nexport function logOutAsync(_x2) {\n  return _logOutAsync.apply(this, arguments);\n}\nfunction _logOutAsync() {\n  _logOutAsync = _asyncToGenerator(function* (_ref) {\n    var accessToken = _ref.accessToken,\n      inputConfig = _objectWithoutProperties(_ref, _excluded);\n    var guid = getPlatformGUID(inputConfig);\n    var clientId = `${guid}.apps.googleusercontent.com`;\n    var config = {\n      issuer: 'https://accounts.google.com',\n      clientId: clientId\n    };\n    return yield AppAuth.revokeAsync(config, {\n      token: accessToken,\n      isClientIdProvided: !!clientId\n    });\n  });\n  return _logOutAsync.apply(this, arguments);\n}","map":{"version":3,"names":["AppAuth","Constants","CodedError","Platform","isInExpo","appOwnership","getPlatformGUID","config","clientId","iosClientId","iosStandaloneAppClientId","androidClientId","androidStandaloneAppClientId","platformClientId","select","ios","android","default","guid","guidFromClientId","PROJECT_ID_LENGTH","isValidGUID","components","split","length","isValid","reason","projectNumber","projectId","isNaN","hashedProjectId","Array","fill","match","hashedProjectNumber","clientIdComponents","filter","component","includes","_isValidGUID","logInAsync","_x","_logInAsync","apply","arguments","_asyncToGenerator","behavior","undefined","console","warn","webClientId","userDefinedScopes","scopes","requiredScopes","concat","_toConsumableArray","Set","redirectUrl","OAuthRedirect","extras","language","hl","loginHint","login_hint","logInResult","authAsync","issuer","additionalParameters","userInfoResponse","fetch","headers","Authorization","accessToken","userInfo","json","type","idToken","refreshToken","user","id","name","givenName","given_name","familyName","family_name","photoUrl","picture","email","error","message","toLowerCase","logOutAsync","_x2","_logOutAsync","_ref","inputConfig","_objectWithoutProperties","_excluded","revokeAsync","token","isClientIdProvided"],"sources":["/Users/wayneonn/Code/PropertyGo/frontend/mobile/node_modules/expo-google-app-auth/src/Google.ts"],"sourcesContent":["import * as AppAuth from 'expo-app-auth';\nimport Constants from 'expo-constants';\nimport { CodedError } from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nconst isInExpo = Constants.appOwnership === 'expo';\nexport type GoogleLogInConfig = {\n  /**\n   * Used in the Expo Play Store client app on Android (development only).\n   *\n   * - Create an Android OAuth Client ID from the [Credentials Page](https://console.developers.google.com/apis/credentials).\n   * - Run `openssl rand -base64 32 | openssl sha1 -c` in your terminal, it will output a string that looks like A1:B2:C3 but longer.\n   * - Paste the output from the previous step into the \"Signing-certificate fingerprint\" text field.\n   * - Use `host.exp.exponent` as the \"Package name\".\n   */\n  androidClientId?: string;\n  /**\n   * Used in the Expo App Store client app on iOS (development only).\n   *\n   * - Select \"iOS Application\" as the Application Type from the [Credentials Page](https://console.developers.google.com/apis/credentials).\n   * - Use `host.exp.exponent` as the bundle identifier.\n   */\n  iosClientId?: string;\n  /**\n   * Used in your custom Android app (production).\n   * Visit the docs page [Deploying to a standalone app on Android](https://docs.expo.io/versions/latest/sdk/google/#deploying-to-a-standalone-app-on-android) for more info.\n   */\n  androidStandaloneAppClientId?: string;\n  /**\n   * Used in your custom iOS app (production).\n   * Visit the docs page [Deploying to a standalone app on iOS](https://docs.expo.io/versions/latest/sdk/google/#deploying-to-a-standalone-app-on-ios) for more info.\n   */\n  iosStandaloneAppClientId?: string;\n  /**\n   * @deprecated [learn more here](https://docs.expo.io/versions/latest/sdk/google/#server-side-apis).\n   */\n  webClientId?: string;\n  /**\n   * System authentication is very different from web auth.\n   * All system functionality has been moved to expo-google-sign-in\n   */\n  behavior?: 'system' | 'web';\n  scopes?: string[];\n  /**\n   * Optionally you can define your own redirect URL.\n   * If this isn't defined then it will be infered from the correct client ID.\n   */\n  redirectUrl?: string;\n  /**\n   * Language for the sign in UI, in the form of ISO 639-1 language code optionally followed by a dash\n   * and ISO 3166-1 alpha-2 region code, such as 'it' or 'pt-PT'.\n   * Only set this value if it's different from the system default (which you can access via expo-localization).\n   */\n  language?: string;\n  /**\n   * If the user's email address is known ahead of time, it can be supplied to be the default option.\n   * If the user has approved access for this app in the past then auth may return without any further interaction.\n   */\n  loginHint?: string;\n  /**\n   * If no other client IDs are defined this will be used.\n   */\n  clientId?: string;\n};\n\nexport type GoogleUser = {\n  id?: string;\n  name?: string;\n  givenName?: string;\n  familyName?: string;\n  photoUrl?: string;\n  email?: string;\n};\n\nexport type LogInResult =\n  | {\n      type: 'cancel';\n    }\n  | {\n      type: 'success';\n      accessToken: string | null;\n      idToken: string | null;\n      refreshToken: string | null;\n      user: GoogleUser;\n    };\n\n/** @deprecated `expo-google-app-auth` is deprecated in favor of `expo-auth-session`. [Learn more](https://docs.expo.dev/guides/authentication/#google). */\nexport function getPlatformGUID(config: GoogleLogInConfig) {\n  const { clientId } = config;\n\n  const iosClientId = isInExpo ? config.iosClientId : config.iosStandaloneAppClientId;\n  const androidClientId = isInExpo ? config.androidClientId : config.androidStandaloneAppClientId;\n\n  const platformClientId =\n    Platform.select({\n      ios: iosClientId,\n      android: androidClientId,\n      default: config.clientId,\n    }) || clientId;\n\n  if (\n    typeof iosClientId === 'string' &&\n    typeof androidClientId === 'string' &&\n    iosClientId === androidClientId\n  ) {\n    throw new CodedError(\n      'ERR_GOOGLE_CONFIG',\n      'Keys for Android and iOS cannot be the same value. Ensure you are linking the client IDs matching the given platforms in the Google APIs console: https://console.developers.google.com/apis/credentials'\n    );\n  }\n\n  if (!platformClientId) {\n    throw new CodedError(\n      'ERR_GOOGLE_CONFIG',\n      'Please provide the appropriate client ID. See the documentation for more details https://docs.expo.io/versions/latest/sdk/google/#loginasync'\n    );\n  }\n\n  const guid = guidFromClientId(platformClientId);\n  return guid;\n}\n\nconst PROJECT_ID_LENGTH = 32;\n\nfunction isValidGUID(guid: string) {\n  const components = guid.split('-');\n  if (components.length !== 2) {\n    return {\n      isValid: false,\n      reason: `\\`${guid}\\` must be a string of numbers and an alphanumeric string ${PROJECT_ID_LENGTH} characters long, joined with a hyphen.`,\n    };\n  }\n  const projectNumber = components[0];\n  const projectId = components[1];\n  if (isNaN(+projectNumber)) {\n    const hashedProjectId = Array(PROJECT_ID_LENGTH).fill('x');\n    return {\n      isValid: false,\n      reason: `\\`${projectNumber}-${hashedProjectId}\\` project number must be a string of numbers.`,\n    };\n  }\n  if (!projectId.match('^[a-zA-Z0-9]+$')) {\n    const hashedProjectNumber = Array(projectNumber.length).fill('x');\n    return {\n      isValid: false,\n      reason: `\\`${hashedProjectNumber}-${projectId}\\` project ID must be an alphanumeric string ${PROJECT_ID_LENGTH} characters long.`,\n    };\n  }\n\n  return { isValid: true };\n}\n\nfunction guidFromClientId(clientId: string): string {\n  const clientIdComponents = clientId.split('.').filter((component) => component.includes('-'));\n\n  const guid = clientIdComponents[0];\n  const { isValid, reason } = isValidGUID(guid);\n  if (!isValid) {\n    throw new CodedError(\n      'ERR_GOOGLE_GUID',\n      reason + ' Please ensure you copied the client ID correctly.'\n    );\n  }\n\n  return guid;\n}\n\n/**\n * Prompts the user to log into Google and grants your app permission to access some of their Google data, as specified by the scopes.\n *\n * @deprecated `expo-google-app-auth` is deprecated in favor of `expo-auth-session`. [Learn more](https://docs.expo.dev/guides/authentication/#google).\n *\n * Get started in:\n * - [**Expo Client**](https://docs.expo.io/versions/latest/sdk/google/#using-it-inside-of-the-expo-app)\n * - [**Standalone**](https://docs.expo.io/versions/latest/sdk/google/#deploying-to-a-standalone-app-on-ios)\n *\n * @param config\n */\nexport async function logInAsync(config: GoogleLogInConfig): Promise<LogInResult> {\n  if (config.behavior !== undefined) {\n    console.warn(\n      \"Deprecated: Native Google Sign-In has been moved to Expo.GoogleSignIn ('expo-google-sign-in') Falling back to `web` behavior. `behavior` deprecated in SDK 34\"\n    );\n  }\n\n  if (config.webClientId !== undefined) {\n    console.warn(\n      'Deprecated: You will need to use expo-google-sign-in to do server side authentication outside of the Expo client'\n    );\n  }\n\n  const userDefinedScopes = config.scopes || [];\n  /* Add the required scopes for returning profile data. */\n  const requiredScopes = [...userDefinedScopes, 'profile', 'email', 'openid'];\n  /* Remove duplicates */\n  const scopes = [...new Set(requiredScopes)];\n\n  const guid = getPlatformGUID(config);\n\n  const clientId = `${guid}.apps.googleusercontent.com`;\n  const redirectUrl = config.redirectUrl\n    ? config.redirectUrl\n    : `${AppAuth.OAuthRedirect}:/oauth2redirect/google`;\n\n  const extras: Record<string, string> = {};\n  if (config.language) {\n    // The OpenID property `ui_locales` doesn't seem to work as expected,\n    // but `hl` will work to change the UI language.\n    // Reference: https://github.com/googleapis/google-api-nodejs-client/blob/9d0dd2b6fa03c5e32efb0e39daac6291ebad2c3d/src/apis/customsearch/v1.ts#L230\n    extras.hl = config.language;\n  }\n  if (config.loginHint) {\n    // Reference https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\n    extras.login_hint = config.loginHint;\n  }\n\n  try {\n    const logInResult = await AppAuth.authAsync({\n      issuer: 'https://accounts.google.com',\n      scopes,\n      redirectUrl,\n      clientId,\n      additionalParameters: extras,\n    });\n\n    // Web login only returns an accessToken so use it to fetch the same info as the native login\n    // does.\n    const userInfoResponse = await fetch('https://www.googleapis.com/userinfo/v2/me', {\n      headers: { Authorization: `Bearer ${logInResult.accessToken}` },\n    });\n    const userInfo = await userInfoResponse.json();\n\n    return {\n      type: 'success',\n      accessToken: logInResult.accessToken,\n      idToken: logInResult.idToken,\n      refreshToken: logInResult.refreshToken,\n      user: {\n        id: userInfo.id,\n        name: userInfo.name,\n        givenName: userInfo.given_name,\n        familyName: userInfo.family_name,\n        photoUrl: userInfo.picture,\n        email: userInfo.email,\n      },\n    };\n  } catch (error) {\n    const message = (error.message as string).toLowerCase();\n    // Error code -3 is the native error code for user cancel on iOS\n    if (message.includes('user cancelled') || message.includes('error -3')) {\n      return { type: 'cancel' };\n    }\n    throw error;\n  }\n}\n\n/** @deprecated `expo-google-app-auth` is deprecated in favor of `expo-auth-session` (`AuthSession.revokeAsync()`). [Learn more](https://docs.expo.dev/guides/authentication/#google). */\nexport async function logOutAsync({\n  accessToken,\n  ...inputConfig\n}: GoogleLogInConfig & { accessToken: string }): Promise<any> {\n  const guid = getPlatformGUID(inputConfig);\n\n  const clientId = `${guid}.apps.googleusercontent.com`;\n\n  const config = {\n    issuer: 'https://accounts.google.com',\n    clientId,\n  };\n\n  return await AppAuth.revokeAsync(config, {\n    token: accessToken,\n    isClientIdProvided: !!clientId,\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}