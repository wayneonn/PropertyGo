{"ast":null,"code":"var mimeTypes = Object.freeze({\n  allFiles: '*/*',\n  audio: 'audio/*',\n  csv: 'text/csv',\n  doc: 'application/msword',\n  docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  images: 'image/*',\n  pdf: 'application/pdf',\n  plainText: 'text/plain',\n  ppt: 'application/vnd.ms-powerpoint',\n  pptx: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  video: 'video/*',\n  xls: 'application/vnd.ms-excel',\n  xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  zip: 'application/zip'\n});\nvar utis = Object.freeze({\n  allFiles: 'public.item',\n  audio: 'public.audio',\n  csv: 'public.comma-separated-values-text',\n  doc: 'com.microsoft.word.doc',\n  docx: 'org.openxmlformats.wordprocessingml.document',\n  images: 'public.image',\n  pdf: 'com.adobe.pdf',\n  plainText: 'public.plain-text',\n  ppt: 'com.microsoft.powerpoint.ppt',\n  pptx: 'org.openxmlformats.presentationml.presentation',\n  video: 'public.movie',\n  xls: 'com.microsoft.excel.xls',\n  xlsx: 'org.openxmlformats.spreadsheetml.sheet',\n  zip: 'public.zip-archive'\n});\nvar extensions = Object.freeze({\n  allFiles: '*',\n  audio: '.3g2 .3gp .aac .adt .adts .aif .aifc .aiff .asf .au .m3u .m4a .m4b .mid .midi .mp2 .mp3 .mp4 .rmi .snd .wav .wax .wma',\n  csv: '.csv',\n  doc: '.doc',\n  docx: '.docx',\n  images: '.jpeg .jpg .png',\n  pdf: '.pdf',\n  plainText: '.txt',\n  ppt: '.ppt',\n  pptx: '.pptx',\n  video: '.mp4',\n  xls: '.xls',\n  xlsx: '.xlsx',\n  zip: '.zip .gz'\n});\nexport var perPlatformTypes = {\n  android: mimeTypes,\n  ios: utis,\n  windows: extensions,\n  macos: extensions,\n  web: extensions\n};\nvar mimesAndUtisAreEqual = true;\nvar mimesAndExtensionsAreEqual = true;\nexport var typesAreEqual = mimesAndUtisAreEqual && mimesAndExtensionsAreEqual;","map":{"version":3,"names":["mimeTypes","Object","freeze","allFiles","audio","csv","doc","docx","images","pdf","plainText","ppt","pptx","video","xls","xlsx","zip","utis","extensions","perPlatformTypes","android","ios","windows","macos","web","mimesAndUtisAreEqual","mimesAndExtensionsAreEqual","typesAreEqual"],"sources":["/Users/limzhongzhi/Desktop/PropertyGo/PropertyGo/frontend/mobile/node_modules/react-native-document-picker/src/fileTypes.ts"],"sourcesContent":["const mimeTypes = Object.freeze({\n  allFiles: '*/*',\n  audio: 'audio/*',\n  csv: 'text/csv',\n  doc: 'application/msword',\n  docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  images: 'image/*',\n  pdf: 'application/pdf',\n  plainText: 'text/plain',\n  ppt: 'application/vnd.ms-powerpoint',\n  pptx: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  video: 'video/*',\n  xls: 'application/vnd.ms-excel',\n  xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  zip: 'application/zip',\n} as const)\n\nconst utis = Object.freeze({\n  allFiles: 'public.item',\n  audio: 'public.audio',\n  csv: 'public.comma-separated-values-text',\n  doc: 'com.microsoft.word.doc',\n  docx: 'org.openxmlformats.wordprocessingml.document',\n  images: 'public.image',\n  pdf: 'com.adobe.pdf',\n  plainText: 'public.plain-text',\n  ppt: 'com.microsoft.powerpoint.ppt',\n  pptx: 'org.openxmlformats.presentationml.presentation',\n  video: 'public.movie',\n  xls: 'com.microsoft.excel.xls',\n  xlsx: 'org.openxmlformats.spreadsheetml.sheet',\n  zip: 'public.zip-archive',\n} as const)\n\nconst extensions = Object.freeze({\n  allFiles: '*',\n  audio:\n    '.3g2 .3gp .aac .adt .adts .aif .aifc .aiff .asf .au .m3u .m4a .m4b .mid .midi .mp2 .mp3 .mp4 .rmi .snd .wav .wax .wma',\n  csv: '.csv',\n  doc: '.doc',\n  docx: '.docx',\n  images: '.jpeg .jpg .png',\n  pdf: '.pdf',\n  plainText: '.txt',\n  ppt: '.ppt',\n  pptx: '.pptx',\n  video: '.mp4',\n  xls: '.xls',\n  xlsx: '.xlsx',\n  zip: '.zip .gz',\n} as const)\n\nexport type PlatformTypes = {\n  android: typeof mimeTypes\n  ios: typeof utis\n  windows: typeof extensions\n}\nexport type SupportedPlatforms = 'ios' | 'android' | 'windows'\n\nexport const perPlatformTypes = {\n  android: mimeTypes,\n  ios: utis,\n  windows: extensions,\n  // unsupported, but added to make TS happy\n  macos: extensions,\n  web: extensions,\n}\n\n// ensure shapes of platformTypes are the same: https://stackoverflow.com/a/67027347/2070942\n// let me know if there's a nicer way\n\ntype AssertEqualKeys<T1 extends object, T2 extends object> = [\n  keyof T1 extends keyof T2 ? 1 : 0,\n  keyof T2 extends keyof T1 ? 1 : 0,\n] extends [1, 1]\n  ? true\n  : false\n\nconst mimesAndUtisAreEqual: AssertEqualKeys<typeof mimeTypes, typeof utis> = true\nconst mimesAndExtensionsAreEqual: AssertEqualKeys<typeof mimeTypes, typeof extensions> = true\nexport const typesAreEqual = mimesAndUtisAreEqual && mimesAndExtensionsAreEqual\n"],"mappings":"AAAA,IAAMA,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAC;EAC9BC,QAAQ,EAAE,KAAK;EACfC,KAAK,EAAE,SAAS;EAChBC,GAAG,EAAE,UAAU;EACfC,GAAG,EAAE,oBAAoB;EACzBC,IAAI,EAAE,yEAAyE;EAC/EC,MAAM,EAAE,SAAS;EACjBC,GAAG,EAAE,iBAAiB;EACtBC,SAAS,EAAE,YAAY;EACvBC,GAAG,EAAE,+BAA+B;EACpCC,IAAI,EAAE,2EAA2E;EACjFC,KAAK,EAAE,SAAS;EAChBC,GAAG,EAAE,0BAA0B;EAC/BC,IAAI,EAAE,mEAAmE;EACzEC,GAAG,EAAE;AACP,CAAU,CAAC;AAEX,IAAMC,IAAI,GAAGhB,MAAM,CAACC,MAAM,CAAC;EACzBC,QAAQ,EAAE,aAAa;EACvBC,KAAK,EAAE,cAAc;EACrBC,GAAG,EAAE,oCAAoC;EACzCC,GAAG,EAAE,wBAAwB;EAC7BC,IAAI,EAAE,8CAA8C;EACpDC,MAAM,EAAE,cAAc;EACtBC,GAAG,EAAE,eAAe;EACpBC,SAAS,EAAE,mBAAmB;EAC9BC,GAAG,EAAE,8BAA8B;EACnCC,IAAI,EAAE,gDAAgD;EACtDC,KAAK,EAAE,cAAc;EACrBC,GAAG,EAAE,yBAAyB;EAC9BC,IAAI,EAAE,wCAAwC;EAC9CC,GAAG,EAAE;AACP,CAAU,CAAC;AAEX,IAAME,UAAU,GAAGjB,MAAM,CAACC,MAAM,CAAC;EAC/BC,QAAQ,EAAE,GAAG;EACbC,KAAK,EACH,uHAAuH;EACzHC,GAAG,EAAE,MAAM;EACXC,GAAG,EAAE,MAAM;EACXC,IAAI,EAAE,OAAO;EACbC,MAAM,EAAE,iBAAiB;EACzBC,GAAG,EAAE,MAAM;EACXC,SAAS,EAAE,MAAM;EACjBC,GAAG,EAAE,MAAM;EACXC,IAAI,EAAE,OAAO;EACbC,KAAK,EAAE,MAAM;EACbC,GAAG,EAAE,MAAM;EACXC,IAAI,EAAE,OAAO;EACbC,GAAG,EAAE;AACP,CAAU,CAAC;AASX,OAAO,IAAMG,gBAAgB,GAAG;EAC9BC,OAAO,EAAEpB,SAAS;EAClBqB,GAAG,EAAEJ,IAAI;EACTK,OAAO,EAAEJ,UAAU;EAEnBK,KAAK,EAAEL,UAAU;EACjBM,GAAG,EAAEN;AACP,CAAC;AAYD,IAAMO,oBAAoE,GAAG,IAAI;AACjF,IAAMC,0BAAgF,GAAG,IAAI;AAC7F,OAAO,IAAMC,aAAa,GAAGF,oBAAoB,IAAIC,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}