{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as DocumentPicker from \"expo-document-picker\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction UploadScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedDocuments = _useState2[0],\n    setSelectedDocuments = _useState2[1];\n  var handleUpload = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var results = yield DocumentPicker.getDocumentAsync({\n          multiple: true,\n          type: \"application/pdf\"\n        });\n        if (results.canceled === false) {\n          var newSelectedDocuments = results.assets;\n          setSelectedDocuments([].concat(_toConsumableArray(selectedDocuments), _toConsumableArray(newSelectedDocuments)));\n          var fileData = new FormData();\n          newSelectedDocuments.forEach(function (document) {\n            var fileuri = document.uri;\n            var filetype = \"application/pdf\";\n            var filename = document.name;\n            console.log(document.uri);\n            var file = {\n              uri: fileuri,\n              type: filetype,\n              name: filename\n            };\n            var base64Data = file.uri.split(\",\")[1];\n            var base64String = window.atob(base64Data);\n            var bytes = new Uint8Array(base64String.length);\n            for (var i = 0; i < base64String.length; i++) {\n              bytes[i] = base64String.charCodeAt(i);\n            }\n            var fileBlob = new Blob([bytes], {\n              type: file.type\n            });\n            console.log(fileBlob);\n            fileData.append(\"documents\", fileBlob);\n          });\n          var response = yield fetch(\"http://127.0.0.1:3000/documents/upload\", {\n            method: \"post\",\n            body: fileData\n          });\n          if (response.ok) {\n            var data = yield response.json();\n            console.log(\"Upload response:\", data);\n          } else {\n            throw new Error(\"File upload failed\");\n          }\n        }\n      } catch (error) {\n        console.log(\"Error selecting documents:\", error);\n      }\n    });\n    return function handleUpload() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var documents = [{\n    id: 1,\n    name: \"Your document here.pdf\"\n  }];\n  var renderDocumentItem = function renderDocumentItem(_ref3) {\n    var item = _ref3.item;\n    return _jsx(TouchableOpacity, {\n      style: styles.documentItem,\n      children: _jsx(Text, {\n        style: styles.documentText,\n        children: item.name\n      })\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.headerText,\n      children: \"Upload your documents here!\"\n    }), _jsx(Button, {\n      title: \"Upload\",\n      onPress: handleUpload\n    }), _jsxs(View, {\n      style: styles.documentListContainer,\n      children: [_jsx(Text, {\n        style: styles.detailText,\n        children: \"List of Documents:\"\n      }), _jsx(FlatList, {\n        data: selectedDocuments.length > 0 ? selectedDocuments : documents,\n        keyExtractor: function keyExtractor(item, index) {\n          return item.id ? item.id.toString() : index.toString();\n        },\n        renderItem: renderDocumentItem\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: \"#fff\"\n  },\n  headerText: {\n    fontSize: 24,\n    marginBottom: 16,\n    textAlign: \"center\"\n  },\n  detailText: {\n    fontSize: 16,\n    marginBottom: 8,\n    fontWeight: \"bold\"\n  },\n  documentListContainer: {\n    borderWidth: 1,\n    borderColor: \"#ddd\",\n    borderRadius: 8,\n    padding: 12,\n    paddingTop: 14\n  },\n  documentItem: {\n    padding: 12,\n    marginBottom: 8,\n    backgroundColor: \"#F8F8F8\",\n    borderRadius: 8\n  },\n  documentText: {\n    fontSize: 14,\n    color: \"#333\"\n  }\n});\nexport default UploadScreen;","map":{"version":3,"names":["React","useState","StyleSheet","View","Text","Button","FlatList","TouchableOpacity","DocumentPicker","jsx","_jsx","jsxs","_jsxs","UploadScreen","_ref","navigation","_useState","_useState2","_slicedToArray","selectedDocuments","setSelectedDocuments","handleUpload","_ref2","_asyncToGenerator","results","getDocumentAsync","multiple","type","canceled","newSelectedDocuments","assets","concat","_toConsumableArray","fileData","FormData","forEach","document","fileuri","uri","filetype","filename","name","console","log","file","base64Data","split","base64String","window","atob","bytes","Uint8Array","length","i","charCodeAt","fileBlob","Blob","append","response","fetch","method","body","ok","data","json","Error","error","apply","arguments","documents","id","renderDocumentItem","_ref3","item","style","styles","documentItem","children","documentText","container","headerText","title","onPress","documentListContainer","detailText","keyExtractor","index","toString","renderItem","create","flex","padding","backgroundColor","fontSize","marginBottom","textAlign","fontWeight","borderWidth","borderColor","borderRadius","paddingTop","color"],"sources":["C:/Users/Legion/Desktop/PropertyGo/PropertyGo/frontend/mobile/DocumentScreen.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  View,\r\n  Text,\r\n  Button,\r\n  FlatList,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\nimport * as DocumentPicker from \"expo-document-picker\";\r\n\r\n// I should really just set this aside for a moment and focus on the backend in more detail.\r\n// Since I need to do Firebase as well.\r\n\r\n// TODO: Add the API backend to consume the documents added.\r\n// Got to figure out what the API spits back.\r\nfunction UploadScreen({ navigation }) {\r\n  const [selectedDocuments, setSelectedDocuments] = useState([]);\r\n\r\n  const handleUpload = async () => {\r\n    try {\r\n      // Limit to only PDF for documents.\r\n      const results = await DocumentPicker.getDocumentAsync({\r\n        multiple: true,\r\n        type: \"application/pdf\",\r\n      });\r\n\r\n      // If there is a file that is selected.\r\n      if (results.canceled === false) {\r\n        const newSelectedDocuments = results.assets;\r\n        setSelectedDocuments([...selectedDocuments, ...newSelectedDocuments]);\r\n\r\n        //Begin logic to send data to API\r\n        const fileData = new FormData();\r\n        // Append each selected document to the FormData object\r\n        newSelectedDocuments.forEach((document) => {\r\n          const fileuri = document.uri;\r\n          const filetype = \"application/pdf\";\r\n          const filename = document.name;\r\n          console.log(document.uri);\r\n\r\n          const file = {\r\n            uri: fileuri,\r\n            type: filetype,\r\n            name: filename,\r\n          };\r\n\r\n          // Extract the base64-encoded data from the URI\r\n          const base64Data = file.uri.split(\",\")[1];\r\n\r\n          // Decode the base64 string into a Uint8Array\r\n          const base64String = window.atob(base64Data);\r\n          const bytes = new Uint8Array(base64String.length);\r\n          for (let i = 0; i < base64String.length; i++) {\r\n            bytes[i] = base64String.charCodeAt(i);\r\n          }\r\n\r\n          // Create a Blob object from the decoded data\r\n          const fileBlob = new Blob([bytes], { type: file.type });\r\n          console.log(fileBlob);\r\n\r\n          fileData.append(\"documents\", fileBlob);\r\n        });\r\n\r\n        // Send the data to the API\r\n        const response = await fetch(\"http://127.0.0.1:3000/documents/upload\", {\r\n          method: \"post\",\r\n          body: fileData,\r\n        });\r\n\r\n        // Check the response status and log the result\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          console.log(\"Upload response:\", data);\r\n        } else {\r\n          throw new Error(\"File upload failed\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error selecting documents:\", error);\r\n    }\r\n  };\r\n\r\n  // Initial dummy documents.\r\n  const documents = [{ id: 1, name: \"Your document here.pdf\" }];\r\n\r\n  const renderDocumentItem = ({ item }) => (\r\n    <TouchableOpacity style={styles.documentItem}>\r\n      <Text style={styles.documentText}>{item.name}</Text>\r\n    </TouchableOpacity>\r\n  );\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.headerText}>Upload your documents here!</Text>\r\n      <Button title=\"Upload\" onPress={handleUpload} />\r\n\r\n      {/* Wrap the FlatList in a View with border styles */}\r\n      <View style={styles.documentListContainer}>\r\n        <Text style={styles.detailText}>List of Documents:</Text>\r\n        <FlatList\r\n          data={selectedDocuments.length > 0 ? selectedDocuments : documents}\r\n          keyExtractor={(item, index) =>\r\n            item.id ? item.id.toString() : index.toString()\r\n          }\r\n          renderItem={renderDocumentItem}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 16,\r\n    backgroundColor: \"#fff\",\r\n  },\r\n  headerText: {\r\n    fontSize: 24,\r\n    marginBottom: 16,\r\n    textAlign: \"center\",\r\n  },\r\n  detailText: {\r\n    fontSize: 16,\r\n    marginBottom: 8,\r\n    fontWeight: \"bold\",\r\n  },\r\n  documentListContainer: {\r\n    borderWidth: 1,\r\n    borderColor: \"#ddd\",\r\n    borderRadius: 8,\r\n    padding: 12,\r\n    paddingTop: 14,\r\n  },\r\n  documentItem: {\r\n    padding: 12,\r\n    marginBottom: 8,\r\n    backgroundColor: \"#F8F8F8\",\r\n    borderRadius: 8,\r\n  },\r\n  documentText: {\r\n    fontSize: 14,\r\n    color: \"#333\",\r\n  },\r\n});\r\n\r\nexport default UploadScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}